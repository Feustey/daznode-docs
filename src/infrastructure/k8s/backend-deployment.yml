apiVersion: apps/v1
kind: Deployment
metadata:
  name: daznode-backend
  namespace: daznode-community
  labels:
    app: daznode-backend
    tier: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: daznode-backend
  template:
    metadata:
      labels:
        app: daznode-backend
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: daznode-backend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: daznode/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: redis-url
        - name: GITBOOK_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: gitbook-api-token
        - name: T4G_CONTRACT_ADDRESS
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: t4g-contract-address
        - name: ETHEREUM_PROVIDER_URL
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: ethereum-provider-url
        - name: T4G_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: t4g-private-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: daznode-secrets
              key: encryption-key
        - name: KAFKA_BROKERS
          value: "kafka-service:9092"
        - name: OTEL_SERVICE_NAME
          value: "daznode-backend"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: daznode-logs-pvc
      - name: config-volume
        configMap:
          name: daznode-backend-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - daznode-backend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node-role.kubernetes.io/spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: daznode-backend-service
  namespace: daznode-community
  labels:
    app: daznode-backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
spec:
  selector:
    app: daznode-backend
  ports:
  - name: http
    port: 80
    targetPort: 3001
    protocol: TCP
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: daznode-backend-sa
  namespace: daznode-community
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: daznode-backend-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: daznode-backend-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: daznode-backend-role
subjects:
- kind: ServiceAccount
  name: daznode-backend-sa
  namespace: daznode-community

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: daznode-backend-pdb
  namespace: daznode-community
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: daznode-backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: daznode-backend-hpa
  namespace: daznode-community
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: daznode-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1k"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: daznode-backend-config
  namespace: daznode-community
data:
  app.json: |
    {
      "rateLimiting": {
        "windowMs": 900000,
        "max": 1000,
        "message": "Too many requests from this IP"
      },
      "cors": {
        "origin": ["https://docs.dazno.de", "https://daznode.com"],
        "credentials": true
      },
      "monitoring": {
        "enableMetrics": true,
        "enableTracing": true,
        "enableLogging": true
      },
      "features": {
        "enableT4GRewards": true,
        "enableGitBookIntegration": true,
        "enableAdvancedAnalytics": true
      }
    }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: daznode-logs-pvc
  namespace: daznode-community
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: efs-sc