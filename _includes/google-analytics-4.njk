<!-- Google Analytics 4 avec events de conversion -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-9YR4K3M7XF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  // Configuration Google Analytics 4
  gtag('config', 'G-9YR4K3M7XF', {
    // Enhanced ecommerce tracking
    enhanced_ecommerce: true,
    
    // Custom parameters pour la segmentation utilisateur
    custom_map: {
      'custom_parameter_1': 'user_segment',
      'custom_parameter_2': 'conversion_path',
      'custom_parameter_3': 'content_category',
      'custom_parameter_4': 'user_journey_stage'
    },

    // Configuration privacy-first
    anonymize_ip: true,
    allow_google_signals: false,
    allow_ad_personalization_signals: false
  });

  // Tracking automatique des interactions CTA
  document.addEventListener('DOMContentLoaded', function() {
    
    // 1. Track page category based on URL
    const currentPath = window.location.pathname;
    let contentCategory = 'general';
    let userJourneyStage = 'awareness';
    
    if (currentPath.includes('getting-started')) {
      contentCategory = 'onboarding';
      userJourneyStage = 'consideration';
    } else if (currentPath.includes('lightning-network')) {
      contentCategory = 'technical';
      userJourneyStage = 'evaluation';
    } else if (currentPath.includes('solutions')) {
      contentCategory = 'commercial';
      userJourneyStage = 'decision';
    } else if (currentPath.includes('devs')) {
      contentCategory = 'developer';
      userJourneyStage = 'implementation';
    }

    // Send page view with enhanced context
    gtag('event', 'page_view', {
      page_title: document.title,
      page_location: window.location.href,
      content_category: contentCategory,
      user_journey_stage: userJourneyStage,
      custom_parameter_3: contentCategory,
      custom_parameter_4: userJourneyStage
    });

    // 2. Track CTA clicks avec détails de conversion
    document.querySelectorAll('a[href*="dazno.de"], .cta-primary, .cta-secondary').forEach(link => {
      link.addEventListener('click', function(e) {
        const ctaText = this.textContent.trim();
        const targetUrl = this.href;
        const isTrialCTA = ctaText.toLowerCase().includes('essai') || 
                          ctaText.toLowerCase().includes('gratuit') ||
                          ctaText.toLowerCase().includes('trial');
        const isDownloadCTA = ctaText.toLowerCase().includes('télécharger') ||
                             ctaText.toLowerCase().includes('pdf') ||
                             ctaText.toLowerCase().includes('guide');

        // Track general CTA click
        gtag('event', 'cta_click', {
          event_category: 'engagement',
          event_label: ctaText,
          cta_location: contentCategory,
          target_url: targetUrl,
          is_conversion_cta: isTrialCTA || isDownloadCTA,
          custom_parameter_2: `${contentCategory}_to_${isTrialCTA ? 'trial' : 'info'}`
        });

        // Track high-value conversions
        if (isTrialCTA) {
          gtag('event', 'begin_checkout', {
            event_category: 'conversion',
            event_label: 'trial_signup',
            value: 1,
            currency: 'EUR',
            items: [{
              item_id: 'trial_30_days',
              item_name: 'DazNode Trial',
              item_category: 'service',
              quantity: 1,
              price: 0
            }]
          });
        }

        if (isDownloadCTA) {
          gtag('event', 'generate_lead', {
            event_category: 'conversion',
            event_label: 'pdf_download',
            value: 0.5,
            currency: 'EUR'
          });
        }
      });
    });

    // 3. Track scroll depth pour engagement
    let scrollThresholds = [25, 50, 75, 90];
    let scrollTracked = [];

    function trackScrollDepth() {
      const scrollPercent = Math.round(
        (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
      );

      scrollThresholds.forEach(threshold => {
        if (scrollPercent >= threshold && !scrollTracked.includes(threshold)) {
          scrollTracked.push(threshold);
          
          gtag('event', 'scroll', {
            event_category: 'engagement',
            event_label: `${threshold}%`,
            scroll_depth: threshold,
            page_category: contentCategory
          });
        }
      });
    }

    let scrollTimeout;
    window.addEventListener('scroll', function() {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(trackScrollDepth, 200);
    });

    // 4. Track time on page (engagement depth)
    let startTime = Date.now();
    let timeThresholds = [30, 60, 120, 300]; // 30s, 1min, 2min, 5min
    let timeTracked = [];

    setInterval(function() {
      const timeSpent = Math.floor((Date.now() - startTime) / 1000);
      
      timeThresholds.forEach(threshold => {
        if (timeSpent >= threshold && !timeTracked.includes(threshold)) {
          timeTracked.push(threshold);
          
          gtag('event', 'timing_complete', {
            name: 'page_engagement',
            value: threshold,
            event_category: 'engagement',
            event_label: `${threshold}s`,
            page_category: contentCategory
          });
        }
      });
    }, 10000); // Check every 10 seconds

    // 5. Track quiz interactions si présent
    const quizModal = document.getElementById('user-segmentation-quiz');
    if (quizModal) {
      // Quiz shown
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'attributes' && 
              mutation.attributeName === 'style' && 
              quizModal.style.display !== 'none') {
            
            gtag('event', 'quiz_start', {
              event_category: 'segmentation',
              event_label: 'user_quiz_shown'
            });
          }
        });
      });
      observer.observe(quizModal, { attributes: true });

      // Quiz answers
      document.querySelectorAll('.quiz-option').forEach(option => {
        option.addEventListener('click', function() {
          const step = this.dataset.step;
          const answer = this.dataset.answer;
          
          gtag('event', 'quiz_answer', {
            event_category: 'segmentation',
            event_label: `step_${step}`,
            quiz_answer: answer,
            custom_parameter_1: answer
          });
        });
      });
    }

    // 6. Track search interactions
    const searchInput = document.querySelector('#search input, .pagefind-ui__search-input');
    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          if (this.value.length > 2) {
            gtag('event', 'search', {
              search_term: this.value,
              event_category: 'site_search',
              page_category: contentCategory
            });
          }
        }, 1000);
      });
    }

    // 7. Track external link clicks
    document.querySelectorAll('a[href*="://"]').forEach(link => {
      if (!link.href.includes('docs.dazno.de') && !link.href.includes('dazno.de')) {
        link.addEventListener('click', function() {
          gtag('event', 'click', {
            event_category: 'outbound_link',
            event_label: this.href,
            transport_type: 'beacon'
          });
        });
      }
    });

    // 8. Track form submissions si présents
    document.querySelectorAll('form').forEach(form => {
      form.addEventListener('submit', function() {
        gtag('event', 'form_submit', {
          event_category: 'engagement',
          event_label: 'documentation_form',
          page_category: contentCategory
        });
      });
    });

  });

  // 9. Enhanced error tracking
  window.addEventListener('error', function(e) {
    gtag('event', 'exception', {
      description: `${e.message} at ${e.filename}:${e.lineno}`,
      fatal: false,
      page_category: contentCategory
    });
  });

  // 10. Track page exit (bounce vs. engaged exit)
  let isEngaged = false;
  
  // Mark as engaged after 30s OR scroll > 25% OR any click
  setTimeout(() => { isEngaged = true; }, 30000);
  document.addEventListener('scroll', () => {
    if (window.scrollY > window.innerHeight * 0.25) {
      isEngaged = true;
    }
  });
  document.addEventListener('click', () => { isEngaged = true; });

  window.addEventListener('beforeunload', function() {
    gtag('event', 'page_exit', {
      event_category: 'engagement',
      event_label: isEngaged ? 'engaged_exit' : 'bounce',
      page_category: contentCategory,
      transport_type: 'beacon'
    });
  });

</script>

<!-- Enhanced ecommerce setup for conversion funnel -->
<script>
  // Define conversion funnel stages
  const conversionStages = {
    'awareness': ['getting-started', 'bitcoin', 'introduction'],
    'consideration': ['lightning-network', 'solutions', 'compare'],
    'evaluation': ['roi-calculator', 'hardware-requirements', 'pricing'],
    'decision': ['trial', 'signup', 'contact'],
    'retention': ['dashboard', 'account', 'support']
  };

  // Track progression through funnel
  function trackFunnelProgression() {
    const currentPath = window.location.pathname;
    let currentStage = 'awareness';
    
    Object.keys(conversionStages).forEach(stage => {
      conversionStages[stage].forEach(keyword => {
        if (currentPath.includes(keyword)) {
          currentStage = stage;
        }
      });
    });

    // Store in session for funnel analysis
    sessionStorage.setItem('currentFunnelStage', currentStage);
    
    // Track funnel step
    gtag('event', 'funnel_step', {
      event_category: 'conversion_funnel',
      event_label: currentStage,
      funnel_position: Object.keys(conversionStages).indexOf(currentStage) + 1,
      custom_parameter_4: currentStage
    });
  }

  document.addEventListener('DOMContentLoaded', trackFunnelProgression);
</script>